#ifndef	__CATCHB_LIST_H__
#define __CATCHB_LIST_H__

#include "catchb_types.h"
#include <semaphore.h>

typedef	CATCHB_BOOL	(*CATCHB_LIST_ELEM_SEEKER)(const CATCHB_VOID_PTR pElement, const CATCHB_VOID_PTR pIndicator);
typedef	CATCHB_INT	(*CATCHB_LIST_ELEM_COMPARATOR)(const CATCHB_VOID_PTR pElement1, const CATCHB_VOID_PTR pElement2);

typedef	enum
{
	CATCHB_LIST_POS_FRONT,
	CATCHB_LIST_POS_REAR,
	CATCHB_LIST_POS_ASSENDING,
	CATCHB_LIST_POS_DESENDING
}	CATCHB_LIST_POS, _PTR_ CATCHB_LIST_POS_PTR;

typedef	struct CATCHB_ENTRY_STRUCT
{
	struct CATCHB_ENTRY_STRUCT _PTR_ pPrev;
	struct CATCHB_ENTRY_STRUCT _PTR_ pNext;

	CATCHB_VOID_PTR	pData;
} CATCHB_ENTRY, _PTR_ CATCHB_ENTRY_PTR;

typedef	struct CATCHB_LIST_STRUCT
{
	CATCHB_UINT32		ulCount;
	CATCHB_ENTRY		xHead;

	CATCHB_BOOL			bIterator;
	CATCHB_ENTRY_PTR	pIter;

	CATCHB_LIST_ELEM_SEEKER		fSeeker;
	CATCHB_LIST_ELEM_COMPARATOR	fComparator;

	sem_t				xLock;
} CATCHB_LIST, _PTR_ CATCHB_LIST_PTR;


CATCHB_RET	CATCHB_LIST_create(CATCHB_LIST_PTR _PTR_ ppList);
CATCHB_RET	CATCHB_LIST_destroy(CATCHB_LIST_PTR _PTR_ ppList);

CATCHB_RET	CATCHB_LIST_init(CATCHB_LIST_PTR pList);
CATCHB_RET	CATCHB_LIST_final(CATCHB_LIST_PTR pList);

CATCHB_RET	CATCHB_LIST_seek(CATCHB_LIST_PTR pList, CATCHB_VOID_PTR pKey);

CATCHB_RET	CATCHB_LIST_append(CATCHB_LIST_PTR pList, CATCHB_VOID_PTR pItem);
CATCHB_RET	CATCHB_LIST_insert(CATCHB_LIST_PTR pList, CATCHB_VOID_PTR pItem, CATCHB_LIST_POS xPos);

CATCHB_RET	CATCHB_LIST_remove(CATCHB_LIST_PTR pList, CATCHB_VOID_PTR pItem);
CATCHB_RET	CATCHB_LIST_removeAt(CATCHB_LIST_PTR pList, CATCHB_UINT32 ulPosition);

CATCHB_RET	CATCHB_LIST_get(CATCHB_LIST_PTR pList, CATCHB_VOID_PTR pKey, CATCHB_VOID_PTR _PTR_ ppElement);
CATCHB_RET	CATCHB_LIST_getFirst(CATCHB_LIST_PTR pList, CATCHB_VOID_PTR _PTR_ ppElement);
CATCHB_RET	CATCHB_LIST_getLast(CATCHB_LIST_PTR pList, CATCHB_VOID_PTR _PTR_ ppElement);
CATCHB_RET	CATCHB_LIST_getAt(CATCHB_LIST_PTR pList, CATCHB_UINT32 ulPosition, CATCHB_VOID_PTR _PTR_ ppElement);

CATCHB_RET	CATCHB_LIST_iteratorStart(CATCHB_LIST_PTR pList);
CATCHB_RET	CATCHB_LIST_iteratorNext(CATCHB_LIST_PTR pList, CATCHB_VOID_PTR _PTR_ ppElement);

CATCHB_RET	CATCHB_LIST_count(CATCHB_LIST_PTR pList, CATCHB_UINT32_PTR pulCount);

CATCHB_RET CATCHB_LIST_setSeeker(CATCHB_LIST_PTR pList, CATCHB_LIST_ELEM_SEEKER fSeeker);
CATCHB_RET CATCHB_LIST_setComparator(CATCHB_LIST_PTR pList, CATCHB_LIST_ELEM_COMPARATOR fComparator);

#endif

